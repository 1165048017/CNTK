# Note: reader configuration comes from AlexNet.cntk or AlexNetComposite.cntk, depending on the test
RootDir = "."

ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"

ndlMacros="$ConfigDir$/Macros.ndl"

precision = "float"
deviceId = "Auto"

command = Train:Test

parallelTrain = "true"
traceLevel = 1
numMBsToShowResult = 500

modelPath = "$ModelDir$/AlexNet"
stderr = "$OutputDir$/AlexNet"

################################
Train = {
    action = "train"

    BrainScriptNetworkBuilder = {
        imageShape = 227:227:3
        labelDim = 1000
        
        model = Sequential (
            ConvolutionalLayer {96, (11:11), stride=(4:4), pad = true} : ReLU : 
            MaxPoolingLayer    {(3:3), stride=(2:2)} :
            ConvolutionalLayer {256, (5:5), pad = true} : ReLU : 
            MaxPoolingLayer    {(3:3), stride=(2:2)} :
            ConvolutionalLayer {384, (3:3), pad = true} : ReLU : 
            ConvolutionalLayer {384, (3:3), pad = true} : ReLU : 
            ConvolutionalLayer {256, (3:3), pad = true} : ReLU : 
            MaxPoolingLayer    {(3:3), stride=(2:2)} :
            DenseLayer         {4096, activation=ReLU} : Dropout :
            DenseLayer         {4096, activation=ReLU} : Dropout :
            LinearLayer        {labelDim}
        )

        # inputs
        features = Input {imageShape}
        labels = Input {labelDim}

        # apply model to features
        z = model (features)

        # loss and error computation
        ce       = CrossEntropyWithSoftmax  (labels, z)
        errs     = ClassificationError      (labels, z)
        top5Errs = ClassificationError      (labels, z, topN=5)  # only used in Eval action

        # declare special nodes
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
        evaluationNodes = (errs)
        outputNodes     = (z)
    }
    
    SGD = {
        epochSize = 0
        minibatchSize = 128
        learningRatesPerMB = 0.01*20:0.003*12:0.001*28:0.0003
        momentumPerMB = 0.9
        maxEpochs = 90
        gradUpdateType = None
        L2RegWeight = 0.0005
        dropoutRate = 0*5:0.5
        
        # TODO: try less bits?
        ParallelTrain = {
            parallelizationMethod = "DataParallelSGD"
            distributedMBReading = "true"
            parallelizationStartEpoch = 1
            DataParallelSGD = {
                gradientBits = 32
            }
        }
        
        numMBsToShowResult = 100
    }
    
    # Reader
    reader = {
        verbosity = 0
        randomize = true
        randomizationWindow = 1

        deserializers = (
        {   
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "$DataDir$/train_map.txt"
            input = {
                features = {
                    transforms = (
                        {
                            type = "Crop"
                            cropType = "random"
                            cropRatio = 0.875
                            jitterType = "uniRatio"
                        }:{
                            type = "Scale"
                            width = 227
                            height = 227
                            channels = 3
                            interpolations = "linear"
                        }:{
                            type = "Mean"
                            meanFile = "$ConfigDir$/ImageNet1K_mean.xml"
                        }:{
                            type = "Transpose"
                        }
                    )
                }
                labels = {
                    labelDim = 1000
                }
            }
        })
    }    
}

################################
Test = {
    action=test
    minibatchSize=128
    evalNodeNames = errs:top5Errs  # also test top-5 error rate
    
    # Reader
    reader = {
        verbosity = 0
        randomize = false

        deserializers = (
        {
            type = "ImageDeserializer" ; module = "ImageReader"
            file="$DataDir$/val_map.txt"
            input = {
                features = {
                    transforms = (
                        {
                            type = "Crop"
                            cropType = "center"
                        }:{
                            type = "Scale"
                            width = 227
                            height = 227
                            channels = 3
                        }:{
                            type = "Mean"
                            meanFile = "$ConfigDir$/ImageNet1K_mean.xml"
                        }:{
                            type = "Transpose"
                        }
                    )
                }
                labels = {
                    labelDim = 1000
                }
            }
        })
    }        
}